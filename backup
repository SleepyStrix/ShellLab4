#! /bin/bash

# Daniel Hewlett
# Utility to backup directories and manage backup files
# Last Revision: 12/7/2018
# Name and purpose of top level variables:
# CONFIG_PATH specifies path to config file backup.conf
# CONFIG_TEXT contains text from config file, converted to runnable script
# BACKUP_ENTRIES_TEXT contains text for backup entries from config file
# BACKUP_ENTRIES_ARRAY contains backup entries split into an array
# INPUT_BACKUP_NAME command lin param, name of backup to run
# BACKUP_TYPE command line param, daily, weekly, monthly backup

#iterate over all backup entries and parse them
parse_backup_entries() {
	echo
	echo "Parsing backup entries from config..."
	for item in "${BACKUP_ENTRIES_ARRAY[@]}"
	do	
		#echo "BACKUP ENTRY: "$item""
		
		#parse entry fields into individual variables
		local BE_NAME=$(echo $item| cut -d: -f1)
		local BE_DIRECTORY=$(echo $item| cut -d: -f2)
		local BE_RECURSIVE=$(echo $item| cut -d: -f3)
		local BE_NUM_DAILY=$(echo $item| cut -d: -f4)
		local BE_NUM_WEEKLY=$(echo $item| cut -d: -f5)	
		local BE_NUM_MONTHLY=$(echo $item| cut -d: -f6)
		
		#match backup name
		if [ "$INPUT_BACKUP_NAME" = "$BE_NAME" ]
		then
			#print entry fields
			echo "NAME: "$BE_NAME""
			echo "DIRECTORY: "$BE_DIRECTORY""
			echo "RECURSIVE: "$BE_RECURSIVE""
			echo "NUM_DAILY: "$BE_NUM_DAILY""
			echo "NUM_WEEKLY: "$BE_NUM_WEEKLY""
			echo "NUM_MONTHLY: "$BE_NUM_MONTHLY""
			echo

			execute_backup $BE_NAME $BE_DIRECTORY $BE_RECURSIVE $BE_NUM_DAILY $BE_NUM_WEEKLY $BE_NUM_MONTHLY
		fi
	done
}

execute_backup() {
	BACKUP_NAME=$1
	DIRECTORY=$2
	IS_RECURSIVE=$3
	NUM_DAILY=$4
	NUM_WEEKLY=$5
	NUM_MONTHLY=$6

	#make archive directories if necessary
	mkdir $TARGET_FS &> /dev/null
	ARCHIVE_FOLDER=$TARGET_FS/$BACKUP_TYPE
	mkdir $ARCHIVE_FOLDER &> /dev/null

	#make archive
	HOSTNAME=$(hostname)
	DATETIME=$(date +%Y-%m-%d.%H:%M)
	ARCHIVE_TYPE="tar.gz"
	ARCHIVE_FILE=$ARCHIVE_FOLDER/$HOSTNAME.$BACKUP_NAME.$DATETIME.$ARCHIVE_TYPE
	echo "making backup:" $ARCHIVE_FILE
	tar -czvf $ARCHIVE_FILE $DIRECTORY &> /dev/null

	#make log directories if necessary
	mkdir "var/log" &> /dev/null
	LOG_DIR="/var/log/backup"
	mkdir $LOG_DIR &> /dev/null

	#create and populate log file
	LOG_FILE=$LOG_DIR/$BACKUP_NAME.$DATETIME
	LOG_TEXT=$(ls -R $DIRECTORY)
	echo $DATETIME >> $LOG_FILE
	echo $LOG_TEXT >> $LOG_FILE

	echo "CREATED BACKUP AT: "$ARCHIVE_FILE
	echo

	#get the correct max number of files for this backup
	case "$BACKUP_TYPE" in
		daily)
			MAX_FILES=$NUM_DAILY
			;;
		weekly)
			MAX_FILES=$NUM_WEEKLY
			;;
		monthly)
			MAX_FILES=$NUM_MONTHLY
			;;
		*)
			return 0;
	esac

	#create cronjob if one does not already exist
	echo "creating cron job if necessary"
	echo "backup" $BACKUP_NAME $BACKUP_TYPE > /etc/cron.$BACKUP_TYPE/Backup-$BACKUP_NAME-$BACKUP_TYPE

	#apply backup limits
	limit_files_in_dir $ARCHIVE_FOLDER $BACKUP_NAME $MAX_FILES
}

#limit the amount of backup files kept for a recurring backup
limit_files_in_dir() {
	TARGET_DIR=$1
	OLDEST_FILE=""
	BACKUP_NAME=$2
	MAX_FILES=$3
	declare -i MAX_OFFSET
	MAX_OFFSET=$MAX_FILES+1
	echo "Limiting backups for $BACKUP_NAME to $MAX_FILES files in $TARGET_DIR"

	# delete old files over the max files limit
	cd $TARGET_DIR
	ls -tp *.$BACKUP_NAME.* | grep -v '/$' | tail -n +$MAX_OFFSET | xargs -I {} rm -- {}

	echo "Finished clearing old files"
}

INPUT_BACKUP_NAME=$1

#get and valibate backup type
BACKUP_TYPE=$2
case "$BACKUP_TYPE" in
	daily|weekly|monthly)
		;;
	*)
		BACKUP_TYPE="adhoc"
		;;
esac
echo "Backup type: "BACKUP_TYPE

CONFIG_PATH="/etc/backup.conf"
#CONFIG_PATH="./backup.conf"

echo "Parsing config file..."

#preserve newlines
IFS=
#read config text into variable
CONFIG_TEXT=$(cat $CONFIG_PATH)

#remove comments
CONFIG_TEXT=$(echo $CONFIG_TEXT | sed -e 's/#.*//g') 
#remove spaces from variables
CONFIG_TEXT=$(echo $CONFIG_TEXT | sed -e 's/[ \t]=[ \t]/=/g') 
#quote variable values
CONFIG_TEXT=$(echo $CONFIG_TEXT | sed -r -e 's/(=)(.*)/="\2"/g') 
#replace '-' with '_'
CONFIG_TEXT=$(echo $CONFIG_TEXT | sed -r -e 's/-/_/g') 
#extract backup entries from config
BACKUP_ENTRIES_TEXT=($(echo $CONFIG_TEXT | sed -nr '/.*:.*/p'))
#remove backup entries from config
CONFIG_TEXT=$(echo $CONFIG_TEXT | sed -r -e 's/.*:.*//g')

#run config as a script to get variables
eval $CONFIG_TEXT

#print standard variables
echo
echo "printing variable values..."
echo "COMPRESSION: "$COMPRESSION""
echo "E-MAIL: "$E_MAIL""
echo "BACKUP_TARGET: "$BACKUP_TARGET""
echo "TARGET_TYPE: "$TARGET_TYPE""
echo "TARGET_SERVER: "$TARGET_SERVER""
echo "TARGET_FS: "$TARGET_FS""
echo "USER: "$USER""
echo "PASSWORD: "$PASSWORD""

#read the backup entries into an array for parsing
readarray -t BACKUP_ENTRIES_ARRAY <<<$BACKUP_ENTRIES_TEXT
parse_backup_entries
echo
echo "done"