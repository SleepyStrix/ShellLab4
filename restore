#! /bin/bash

# Daniel Hewlett
# Utility to restore backed up directories
# Last Revision: 12/7/2018
# Name and purpose of top level variables:
# CONFIG_PATH specifies path to config file backup.conf
# CONFIG_TEXT contains text from config file, converted to runnable script
# BACKUP_ENTRIES_TEXT contains text for backup entries from config file
# BACKUP_ENTRIES_ARRAY contains backup entries split into an array
# INPUT_ARCHIVE_PATH argument containing backup file to restore
# INPUT_BACKUP_NAME name of backup, extracted from filename

#iterate over all backup entries and parse them
parse_backup_entries() {
	echo
	echo "Parsing backup entries from config..."
	for item in "${BACKUP_ENTRIES_ARRAY[@]}"
	do	
		#echo "RESTORE BACKUP ENTRY: "$item""
		
		#parse entry fields into individual variables
		local BE_NAME=$(echo $item| cut -d: -f1)
		local BE_DIRECTORY=$(echo $item| cut -d: -f2)
		local BE_RECURSIVE=$(echo $item| cut -d: -f3)
		local BE_NUM_DAILY=$(echo $item| cut -d: -f4)
		local BE_NUM_WEEKLY=$(echo $item| cut -d: -f5)	
		local BE_NUM_MONTHLY=$(echo $item| cut -d: -f6)
		
		if [ "$INPUT_BACKUP_NAME" = "$BE_NAME" ]
		then
			echo "RESTORING BACKUP:"
			#print entry fields
			echo "NAME: "$BE_NAME""
			echo "DIRECTORY: "$BE_DIRECTORY""
			echo "RECURSIVE: "$BE_RECURSIVE""
			echo "NUM_DAILY: "$BE_NUM_DAILY""
			echo "NUM_WEEKLY: "$BE_NUM_WEEKLY""
			echo "NUM_MONTHLY: "$BE_NUM_MONTHLY""
			echo

			execute_restore $BE_NAME $BE_DIRECTORY $BE_RECURSIVE $BE_NUM_DAILY $BE_NUM_WEEKLY $BE_NUM_MONTHLY
		fi		
	done
}

execute_restore() {
	BACKUP_NAME=$1
	DIRECTORY=$2
	IS_RECURSIVE=$3
	NUM_DAILY=$4
	NUM_WEEKLY=$5
	NUM_MONTHLY=$6

	echo "extracting backup:" $INPUT_ARCHIVE_PATH

	#go to extraction directory
	cd $DIRECTORY
	cd ..
	#extract backup
	tar -xzvf $INPUT_ARCHIVE_PATH
}

#Get command line input
INPUT_ARCHIVE_PATH=$1
# extract backup name from archive name
INPUT_BACKUP_NAME=$(echo $INPUT_ARCHIVE_PATH | cut -d. -f2)
echo "INPUT BACKUP NAME: "$INPUT_BACKUP_NAME

CONFIG_PATH="/etc/backup.conf"
#CONFIG_PATH="./backup.conf"

echo "Parsing config file..."

#preserve newlines
IFS=
#read config text into variable
CONFIG_TEXT=$(cat $CONFIG_PATH)

#remove comments
CONFIG_TEXT=$(echo $CONFIG_TEXT | sed -e 's/#.*//g') 
#remove spaces from variables
CONFIG_TEXT=$(echo $CONFIG_TEXT | sed -e 's/[ \t]=[ \t]/=/g') 
#quote variable values
CONFIG_TEXT=$(echo $CONFIG_TEXT | sed -r -e 's/(=)(.*)/="\2"/g') 
#replace '-' with '_'
CONFIG_TEXT=$(echo $CONFIG_TEXT | sed -r -e 's/-/_/g') 
#extract backup entries from config
BACKUP_ENTRIES_TEXT=($(echo $CONFIG_TEXT | sed -nr '/.*:.*/p'))
#remove backup entries from config
CONFIG_TEXT=$(echo $CONFIG_TEXT | sed -r -e 's/.*:.*//g')

#run config as a script to get variables
eval $CONFIG_TEXT

#read the backup entries into an array for parsing
readarray -t BACKUP_ENTRIES_ARRAY <<<$BACKUP_ENTRIES_TEXT

read -p "Are you sure you want to restore this backup?(Y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
	parse_backup_entries
else
	echo "Restore canceled."
fi